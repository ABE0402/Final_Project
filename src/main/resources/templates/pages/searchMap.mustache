<!doctype html>
<html lang="ko">
<head>
    <meta charset="UTF-8" />
    <title>주변 카페·식당 보기</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style>
        * { box-sizing: border-box; }
        body { margin:0; font-family: system-ui, -apple-system, Segoe UI, Roboto, sans-serif; color:#111; }

        .topbar { display:flex; gap:12px; padding:12px 16px; align-items:center; border-bottom:1px solid #eee; }
        .segmented { display:inline-flex; border:1px solid #ddd; border-radius:999px; overflow:hidden; }
        .segmented button { padding:8px 14px; border:0; background:#fff; cursor:pointer; font-weight:600; }
        .segmented button.active { background:#111; color:#fff; }

        .legend { margin-left:auto; display:flex; gap:12px; align-items:center; font-size:12px; color:#666 }
        .legend .dot { width:10px; height:10px; border-radius:50%; display:inline-block; }

        .content { display:grid; grid-template-columns: 1.2fr 2.8fr; height: calc(100vh - 60px); }
        .sidebar { min-width:360px; max-width:680px; padding:16px; border-right:1px solid #eee; overflow:auto; }
        .sidebar h3 { margin:6px 0 14px; font-size:16px; }

        .list { display:flex; flex-direction:column; gap:14px; }
        .item {
          position: relative;
          display:flex; flex-direction:column; gap:10px;
          padding:16px; border:1px solid #e6e6e6; border-radius:14px; background:#fff;
          box-shadow:0 1px 2px rgba(0,0,0,.03);
        }
        .title { font-weight:800; font-size:17px; line-height:1.35; padding-right:112px; }
        .desc {
          font-size:14px; color:#444; line-height:1.6;
          display:-webkit-box; -webkit-line-clamp:3; -webkit-box-orient:vertical; overflow:hidden;
        }
        .btn-view-top {
          position:absolute; top:12px; right:12px; z-index:2;
          padding:8px 12px; border:none; border-radius:10px;
          background:#111; color:#fff; font-weight:700; font-size:13px; cursor:pointer;
          box-shadow:0 2px 6px rgba(0,0,0,.08);
        }
        .btn-view-top:hover { filter:brightness(1.05); }

        .amenities { display:flex; gap:8px; flex-wrap:wrap; margin-top:2px; }
        .amenity {
          display:inline-flex; align-items:center; justify-content:center;
          width:28px; height:28px; border-radius:50%;
          background:#f5f7fb; border:1px solid #e7ebf3; box-shadow:0 1px 1px rgba(0,0,0,.02);
        }
        .amenity svg { width:16px; height:16px; display:block; }
        .amenity[title] { cursor:help; }

        .gallery { display:grid; grid-template-columns: repeat(3, 1fr); gap:8px; margin-top:2px; }
        .gallery img { width:100%; height:110px; object-fit:cover; border-radius:10px; background:#f3f3f3; }

        .actions { margin-top:6px; display:flex; gap:10px; }
        .btn {
          padding:8px 12px; border:1px solid #ddd; background:#fafafa;
          border-radius:10px; cursor:pointer; text-decoration:none; color:#111; font-weight:600; font-size:13px;
        }

        .mapwrap { position:relative; }
        #map { position:absolute; inset:0; }

        @media (max-width: 980px) {
          .content { grid-template-columns: 1fr; }
          .mapwrap { height: 480px; }
          #map { position:relative; height:100%; }
          .sidebar { min-width: unset; }
          .title { padding-right:96px; }
          .btn-view-top { top:10px; right:10px; padding:7px 10px; }
          .legend { display:none; }
        }
    </style>
</head>
<body>

<div class="topbar">
    <div class="segmented" id="catToggle">
        <button data-cat="CE7" class="active">카페</button>
        <button data-cat="FD6">식당</button>
    </div>
    <div style="font-size:13px;color:#666;">내 위치 기준 반경 500m (지도 중심 고정)</div>

    <div class="legend">
    <span style="display:inline-flex; align-items:center; gap:6px;">
      <span class="dot" style="background:#2D7DF6"></span> 카페
    </span>
        <span style="display:inline-flex; align-items:center; gap:6px;">
      <span class="dot" style="background:#FF8A00"></span> 식당
    </span>
    </div>
</div>

<div class="content">
    <aside class="sidebar">
        <h3>내 리스트</h3>
        <div id="myList" class="list"></div>
    </aside>

    <section class="mapwrap">
        <div id="map"></div>
    </section>
</div>

<!-- Kakao Maps SDK -->
<script src="https://dapi.kakao.com/v2/maps/sdk.js?appkey={{kakaoJsKey}}&libraries=services,clusterer&autoload=false"></script>
<script>
    // =========================
    // Config / 전역 상수
    // =========================
    const RADIUS_M = 500;
    let selectedCat = 'CE7';              // 'CE7': 카페, 'FD6': 식당
    const AUTO_FIT_PADDING = 12;
    const DATA_URL = '/data/my-places.json'; // 정적 JSON 경로

    const CARD = { WIDTH: 360, COVER_H: 200, THUMB: 64 };

    // =========================
    // 전역 상태
    // =========================
    let map, circle, myClusterer;
    let geocoder, placesSvc;
    let sharedIW = null, currentInfoMarker = null;

    let myPlaces = [];
    const myPlaceCoords = new Map();      // id -> {lat,lng}
    const myMarkers = new Map();          // id -> kakao.maps.Marker

    let userCenter = null;                // {lat,lng}

    // =========================
    // 유틸
    // =========================
    function normalizeImages(p) {
      if (Array.isArray(p.images) && p.images.length) return p.images.filter(Boolean);
      if (Array.isArray(p.imageUrls) && p.imageUrls.length) return p.imageUrls.filter(Boolean);
      if (p.heroImageUrl) return [p.heroImageUrl];
      if (p.image) return [p.image];
      return [];
    }
    function getDesc(p){ return (p.description || p.desc || '').toString(); }
    function joinAddress(p){
      if (p.address) return p.address;
      const road = p.addressRoad || ''; const det = p.addressDetail || '';
      return (road + (det ? ' ' + det : '')).trim();
    }
    function distanceMeters(lat1, lng1, lat2, lng2) {
      const toRad = d => d * Math.PI / 180;
      const R = 6371000;
      const dLat = toRad(lat2 - lat1);
      const dLng = toRad(lng2 - lng1);
      const a = Math.sin(dLat/2)**2 +
                Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *
                Math.sin(dLng/2)**2;
      return 2 * R * Math.asin(Math.sqrt(a));
    }

    // =========================
    // 편의시설 아이콘
    // =========================
    const IColor = { stroke: '#334155', fill: '#334155' };
    const Icons = {
      parking: () => `<svg viewBox="0 0 24 24" fill="none" stroke="${IColor.stroke}" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round"><rect x="3.5" y="3.5" width="17" height="17" rx="2.5"></rect><path d="M9 17V7h4a3 3 0 0 1 0 6h-4"></path></svg>`,
      restroom: () => `<svg viewBox="0 0 24 24" fill="none" stroke="${IColor.stroke}" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round"><path d="M6 7h12M8 7v10m8-10v10M6 17h12"></path><text x="12" y="14" text-anchor="middle" font-size="7" fill="${IColor.fill}" font-family="system-ui, -apple-system, Segoe UI, Roboto">WC</text></svg>`,
      waiting: () => `<svg viewBox="0 0 24 24" fill="none" stroke="${IColor.stroke}" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round"><path d="M6 18h12M8 18l1-5h6l1 5"></path><rect x="9" y="6" width="6" height="5" rx="2"></rect></svg>`,
      pets: () => `<svg viewBox="0 0 24 24" fill="${IColor.fill}" stroke="none"><circle cx="7.5" cy="8" r="1.6"/><circle cx="12" cy="6.6" r="1.6"/><circle cx="16.5" cy="8" r="1.6"/><circle cx="9.6" cy="11.5" r="1.6"/><path d="M12 12c3 0 4.8 1.8 4.8 3.8 0 2-1.7 3.2-3.8 3.2h-2c-2.1 0-3.8-1.2-3.8-3.2 0-2 1.8-3.8 4.8-3.8z"/></svg>`,
      takeout: () => `<svg viewBox="0 0 24 24" fill="none" stroke="${IColor.stroke}" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round"><path d="M7 8h10l2 12H5L7 8z"></path><path d="M9 8V6a3 3 0 0 1 6 0v2"></path></svg>`,
      reserve: () => `<svg viewBox="0 0 24 24" fill="none" stroke="${IColor.stroke}" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="5" width="18" height="16" rx="2"></rect><path d="M16 3v4M8 3v4M3 9h18"></path><path d="M8 13h4"></path></svg>`
    };

    function extractAmenities(p){
      const has = k => p[k] === true;
      const fromArray = (code) =>
        Array.isArray(p.amenities) && p.amenities.map(x => String(x).toUpperCase()).includes(code);

      return {
        parking: has('has_parking') || has('hasParking') || fromArray('PARKING'),
        restroom: has('has_restroom') || has('hasRestroom') || has('restroomAvailable') || fromArray('RESTROOM'),
        waiting: has('has_waiting_room') || has('hasWaitingRoom') || fromArray('WAITING'),
        pets: has('allows_pets') || has('allowsPets') || fromArray('PETS'),
        takeout: has('takeout_available') || has('takeoutAvailable') || fromArray('TAKEOUT'),
        reserve: has('reservation_available') || has('reservationAvailable') || fromArray('RESERVATION'),
      };
    }

    function renderAmenityChips(p){
      const a = extractAmenities(p);
      const entries = [
        ['parking','주차장', Icons.parking],
        ['restroom','화장실', Icons.restroom],
        ['waiting','대기공간', Icons.waiting],
        ['pets','반려동물', Icons.pets],
        ['takeout','포장가능', Icons.takeout],
        ['reserve','예약가능', Icons.reserve],
      ];
      const chips = entries
        .filter(([key]) => a[key])
        .map(([key, title, icon]) => `<span class="amenity" title="${title}">${icon()}</span>`);
      return chips.length ? `<div class="amenities">${chips.join('')}</div>` : '';
    }

    // =========================
    // 타입별 마커 모양/이미지 (카페=물방울+컵, 식당=다이아몬드+포크·나이프)
    // =========================
    const _svgDataUrl = (svg) => 'data:image/svg+xml;utf8,' + encodeURIComponent(svg);

    function svgCafePin({ fill = '#2D7DF6', stroke = '#0B56C4' } = {}) {
      const svg = `
      <svg xmlns="http://www.w3.org/2000/svg" width="28" height="40" viewBox="0 0 56 80">
        <path d="M28 2c-12.15 0-22 9.85-22 22 0 16.2 16.2 29.9 21.2 52.7a1.6 1.6 0 0 0 1.6 1.3
                 1.6 1.6 0 0 0 1.6-1.3C33.8 53.9 50 40.2 50 24 50 11.85 40.15 2 28 2z"
              fill="${fill}" stroke="${stroke}" stroke-width="2"/>
        <circle cx="28" cy="24" r="8.5" fill="#fff"/>
        <g transform="translate(28 24) scale(0.7) translate(-28 -24)">
          <rect x="21" y="19" width="14" height="8" rx="2" ry="2" fill="${stroke}" opacity=".9"/>
          <rect x="34" y="20.5" width="5.5" height="5" rx="2.5" fill="${stroke}" opacity=".9"/>
          <rect x="23" y="28" width="10" height="2.6" rx="1.3" fill="${stroke}" opacity=".9"/>
        </g>
      </svg>`;
      return _svgDataUrl(svg);
    }

    function svgFoodPin({ fill = '#FF8A00', stroke = '#C96A00' } = {}) {
      const svg = `
      <svg xmlns="http://www.w3.org/2000/svg" width="28" height="40" viewBox="0 0 56 80">
        <path d="M28 6 L50 28 L28 50 L6 28 Z" fill="${fill}" stroke="${stroke}" stroke-width="2"/>
        <path d="M28 50 L35 66 L21 66 Z" fill="${fill}" stroke="${stroke}" stroke-width="2"/>
        <g stroke="#fff" stroke-width="2.3" stroke-linecap="round">
          <path d="M23 22 v14" />
          <path d="M20.7 22 v6" />
          <path d="M25.3 22 v6" />
          <path d="M33 22 v14" />
          <path d="M33 22 q4 4 -1 8" />
        </g>
      </svg>`;
      return _svgDataUrl(svg);
    }

    function markerImgForType(type){
      const t = (type||'').toUpperCase();
      const imgUrl = (t === 'CAFE')
        ? svgCafePin({ fill:'#2D7DF6', stroke:'#0B56C4' })
        : svgFoodPin({ fill:'#FF8A00', stroke:'#C96A00' });

      return new kakao.maps.MarkerImage(
        imgUrl,
        new kakao.maps.Size(28, 40),
        { offset: new kakao.maps.Point(14, 40) }
      );
    }

    // =========================
    // 지도/반경/클러스터
    // =========================
    function initMap(lat, lng) {
      map = new kakao.maps.Map(document.getElementById('map'), {
        center: new kakao.maps.LatLng(lat, lng),
        level: 5
      });
      resetClustererForSelected();

      setTimeout(() => { map.relayout(); fitCircleNow(); }, 0);
      window.addEventListener('resize', () => {
        map.relayout();
        setTimeout(fitCircleNow, 0);
      });
    }

    function resetClustererForSelected(){
      try { myClusterer.clear(); } catch(_) {}
      const isCafe = (selectedCat === 'CE7');
      myClusterer = new kakao.maps.MarkerClusterer({
        map, averageCenter: true, minLevel: 6,
        styles: [{
          width: '38px', height: '38px',
          background: isCafe ? '#2D7DF6' : '#FF8A00',
          color:'#fff', borderRadius:'50%', lineHeight:'38px',
          textAlign:'center', fontWeight:'700', fontSize:'13px',
          boxShadow:'0 1px 3px rgba(0,0,0,.2)'
        }]
      });
    }

    function drawUserRadius() {
      if (!userCenter) return;
      if (circle) circle.setMap(null);
      circle = new kakao.maps.Circle({
        center: new kakao.maps.LatLng(userCenter.lat, userCenter.lng),
        radius: RADIUS_M,
        strokeWeight: 2, strokeColor: '#0052cc', strokeOpacity: 0.8,
        strokeStyle: 'solid', fillColor: '#0052cc', fillOpacity: 0.12
      });
      circle.setMap(map);
      fitCircleNow();
    }

    function fitMapToCircle(lat, lng, radiusMeters, paddingPx = AUTO_FIT_PADDING) {
      const dLat = radiusMeters / 111320;
      const rad = Math.PI / 180;
      const dLng = radiusMeters / (111320 * Math.cos(lat * rad));
      const sw = new kakao.maps.LatLng(lat - dLat, lng - dLng);
      const ne = new kakao.maps.LatLng(lat + dLat, lng + dLng);
      const bounds = new kakao.maps.LatLngBounds(sw, ne);
      try { map.setBounds(bounds, paddingPx); } catch (_) { map.setBounds(bounds); }
    }
    function fitCircleNow(padding = AUTO_FIT_PADDING){
      if (!userCenter) return;
      fitMapToCircle(userCenter.lat, userCenter.lng, RADIUS_M, padding);
    }

    // =========================
    // 좌표 보장(주소→키워드, 캐시)
    // =========================
    async function ensureCoords(p) {
      if (myPlaceCoords.has(p.id)) return myPlaceCoords.get(p.id);
      if (Number.isFinite(p.lat) && Number.isFinite(p.lng)) {
        const v = { lat: Number(p.lat), lng: Number(p.lng) };
        myPlaceCoords.set(p.id, v); return v;
      }
      const addr = p.roadAddress || p.address || p.addressRoad || p.jibunAddress || '';
      const kw   = [p.name, p.location].filter(Boolean).join(' ');

      const byAddress = await new Promise(res => {
        if (!addr) return res(null);
        geocoder.addressSearch(addr, (r, status) => {
          if (status === kakao.maps.services.Status.OK && r[0]) {
            res({ lat: parseFloat(r[0].y), lng: parseFloat(r[0].x) });
          } else res(null);
        });
      });
      if (byAddress) { myPlaceCoords.set(p.id, byAddress); return byAddress; }

      const byKeyword = await new Promise(res => {
        if (!kw) return res(null);
        placesSvc.keywordSearch(
          kw,
          (r, status) => {
            if (status === kakao.maps.services.Status.OK && r[0]) {
              res({ lat: parseFloat(r[0].y), lng: parseFloat(r[0].x) });
            } else res(null);
          },
          userCenter ? { x: userCenter.lng, y: userCenter.lat } : undefined
        );
      });
      if (byKeyword) myPlaceCoords.set(p.id, byKeyword);
      return byKeyword;
    }

    // =========================
    // 인포윈도우 카드
    // =========================
    function renderInfoHtml(p) {
      const imgs = normalizeImages(p);
      const cover = imgs[0];
      const others = imgs.slice(1, 4);
      const desc = getDesc(p);
      const addr = joinAddress(p);

      const thumbs = others.map(u => `
        <img src="${u}" alt=""
             style="width:${CARD.THUMB}px;height:${CARD.THUMB}px;object-fit:cover;border-radius:8px;background:#f2f2f2"
             loading="lazy" />
      `).join('');

      return `
        <div style="width:${CARD.WIDTH}px;padding:10px;line-height:1.45;overflow:hidden;">
          ${cover ? `<img src="${cover}" alt="" style="width:100%;height:${CARD.COVER_H}px;object-fit:cover;border-radius:10px;background:#f2f2f2" loading="lazy" />` : ``}
          <div style="font-weight:800;font-size:16px;margin-top:10px;word-break:keep-all;overflow-wrap:anywhere;">${p.name || ''}</div>
          ${desc ? `<div style="font-size:13px;color:#555;margin-top:6px;word-break:keep-all;overflow-wrap:anywhere;">${desc}</div>` : ``}
          ${addr ? `<div style="font-size:12px;color:#888;margin-top:6px;word-break:keep-all;overflow-wrap:anywhere;">${addr}</div>` : ``}
          ${renderAmenityChips(p)}
          ${others.length ? `<div style="display:flex;gap:8px;margin-top:10px;flex-wrap:nowrap;">${thumbs}</div>` : ``}
        </div>
      `;
    }

    // =========================
    // 마커/리스트
    // =========================
    function wantTypeNow(){ return (selectedCat === 'CE7') ? 'CAFE' : 'RESTAURANT'; }

    async function refreshMyMarkers() {
      if (!userCenter) return;
      resetClustererForSelected();

      const showMarkers = [];
      const wantType = wantTypeNow();

      for (const p of myPlaces) {
        if ((p.type || '').toUpperCase() !== wantType) {
          const mk0 = myMarkers.get(p.id); if (mk0 && mk0.getMap()) mk0.setMap(null);
          continue;
        }
        const coord = await ensureCoords(p);
        if (!coord) { const mk0 = myMarkers.get(p.id); if (mk0 && mk0.getMap()) mk0.setMap(null); continue; }

        const dist = distanceMeters(userCenter.lat, userCenter.lng, coord.lat, coord.lng);
        const inside = dist <= RADIUS_M;

        let mk = myMarkers.get(p.id);
        if (!mk) {
          const img = markerImgForType(p.type);
          mk = new kakao.maps.Marker({
            position: new kakao.maps.LatLng(coord.lat, coord.lng),
            title: p.name,
            image: img
          });
          kakao.maps.event.addListener(mk, 'click', () => {
            const html = renderInfoHtml(p);
            if (currentInfoMarker === mk) { sharedIW.close(); currentInfoMarker = null; return; }
            sharedIW.setContent(html);
            sharedIW.open(map, mk);
            currentInfoMarker = mk;
            fitCircleNow();
          });
          myMarkers.set(p.id, mk);
        } else {
          mk.setPosition(new kakao.maps.LatLng(coord.lat, coord.lng));
          mk.setImage(markerImgForType(p.type)); // 타입 토글 시 이미지 갱신
        }

        if (inside) {
          if (!mk.getMap()) mk.setMap(map);
          showMarkers.push(mk);
        } else {
          if (mk.getMap()) mk.setMap(null);
        }
      }
      if (showMarkers.length) myClusterer.addMarkers(showMarkers);
    }

    async function loadMyPlacesAndRender() {
      const res = await fetch(`${DATA_URL}?v=${Date.now()}`, { cache: 'no-store' });
      if (!res.ok) { console.error('fetch my-places.json failed', res.status); return; }
      const json = await res.json();
      const list = Array.isArray(json) ? json : (json.items || json.data || []);
      myPlaces = list;

      const wrap = document.getElementById('myList');
      wrap.innerHTML = '';

      const wantType = wantTypeNow();

      list.forEach(p => {
        if ((p.type || '').toUpperCase() !== wantType) return;

        const imgs = normalizeImages(p).slice(0, 3);
        const desc = getDesc(p);

        const item = document.createElement('div');
        item.className = 'item';
        item.innerHTML = `
          <button class="btn-view-top btn-view" data-id="${p.id}">지도에서 보기</button>
          <div class="title">${p.name || ''}</div>
          ${desc ? `<div class="desc">${desc}</div>` : `<div class="desc" style="color:#888">소개가 아직 없어요</div>`}
          ${renderAmenityChips(p)}
          <div class="gallery">
            ${imgs.length ? imgs.map(u => `<img src="${u}" alt="" loading="lazy" />`).join('') :
              `<img src="data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='300' height='200'><rect width='100%' height='100%' fill='%23f3f3f3'/><text x='50%' y='50%' dominant-baseline='middle' text-anchor='middle' fill='%23999' font-size='14'>이미지 없음</text></svg>" alt="" />`}
          </div>
          <div class="actions">
            ${p.url ? `<a class="btn" href="${p.url}" target="_blank">링크</a>` : ``}
          </div>
        `;
        wrap.appendChild(item);
      });

      wrap.onclick = async (e) => {
        const btn = e.target.closest('.btn-view'); if (!btn) return;
        const id = Number(btn.dataset.id);
        const item = myPlaces.find(x => x.id === id);
        const coord = await ensureCoords(item);
        if (!coord) { alert('좌표를 찾지 못했어. 이름/주소를 확인해줘.'); return; }

        const mk = myMarkers.get(id);
        const html = renderInfoHtml(item);
        sharedIW.setContent(html);
        if (mk) { sharedIW.open(map, mk); currentInfoMarker = mk; }
        else { sharedIW.setPosition(new kakao.maps.LatLng(coord.lat, coord.lng)); sharedIW.open(map); currentInfoMarker = null; }
        fitCircleNow();
      };

      await refreshMyMarkers();
    }

    // =========================
    // 카테고리 토글
    // =========================
    function bindCategoryToggle() {
      const wrap = document.getElementById('catToggle');
      wrap.addEventListener('click', async (e) => {
        const btn = e.target.closest('button'); if (!btn) return;
        wrap.querySelectorAll('button').forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        selectedCat = btn.dataset.cat;

        await loadMyPlacesAndRender();
        await refreshMyMarkers();
        fitCircleNow();
      });
    }

    // =========================
    // 시작
    // =========================
    function init() {
      const baseLat = 37.55694, baseLng = 126.92391; // 홍대입구
      initMap(baseLat, baseLng);
      bindCategoryToggle();

      geocoder  = new kakao.maps.services.Geocoder();
      placesSvc = new kakao.maps.services.Places();
      sharedIW  = new kakao.maps.InfoWindow({ removable: true, zIndex: 3 });
      kakao.maps.event.addListener(map, 'click', () => { sharedIW.close(); currentInfoMarker = null; });

      const start = async (lat, lng) => {
        userCenter = { lat, lng };
        initMap(lat, lng);
        geocoder  = new kakao.maps.services.Geocoder();
        placesSvc = new kakao.maps.services.Places();
        sharedIW  = new kakao.maps.InfoWindow({ removable: true, zIndex: 3 });
        kakao.maps.event.addListener(map, 'click', () => { sharedIW.close(); currentInfoMarker = null; });

        drawUserRadius();
        await loadMyPlacesAndRender();
        await refreshMyMarkers();
      };

      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          pos => start(pos.coords.latitude, pos.coords.longitude),
          ()  => start(baseLat, baseLng),
          { enableHighAccuracy:true, timeout:5000 }
        );
      } else {
        start(baseLat, baseLng);
      }
    }

    window.addEventListener('load', () => kakao.maps.load(init));
</script>
</body>
</html>
